When logged on as user lfs, the initial shell is usually a login shell which reads the /etc/profile of the host (probably containing some settings and environment variables) and then .bash_profile. The exec env -i.../bin/bash command in the .bash_profile file replaces the running shell with a new one with a completely empty environment, except for the HOME, TERM, and PS1 variables. This ensures that no unwanted and potentially hazardous environment variables from the host system leak into the build environment. The technique used here achieves the goal of ensuring a clean environment.
The new instance of the shell is a non-login shell, which does not read, and execute, the contents of /etc/profile or .bash_profile files, but rather reads, and executes, the .bashrc file instead.

build
    is the machine where we build programs. Note that this machine is referred to as the “host” in other sections.
host
    is the machine/system where the built programs will run. Note that this use of “host” is not the same as in other sections.
target
    is only used for compilers. It is the machine the compiler produces code for. It may be different from both build and host.

As an example, let us imagine the following scenario (sometimes referred to as “Canadian Cross”): we may have a compiler on a slow machine only, let's call the machine A, and the compiler ccA. We may have also a fast machine (B), but with no compiler, and we may want to produce code for another slow machine (C). To build a compiler for machine C, we would have three stages:
	Stage 	Build 	Host 	Target 	Action
	1 	A 	A 	B 	build cross-compiler cc1 using ccA on machine A
	2 	A 	B 	C 	build cross-compiler cc2 using cc1 on machine A
	3 	B 	C 	C 	build compiler ccC using cc2 on machine B
Then, all the other programs needed by machine C can be compiled using cc2 on the fast machine B. Note that unless B can run programs produced for C, there is no way to test the built programs until machine C itself is running. For example, for testing ccC, we may want to add a fourth stage:
	Stage 	Build 	Host 	Target 	Action
	4 	C 	C 	C 	rebuild and test ccC using itself on machine C
In the example above, only cc1 and cc2 are cross-compilers, that is, they produce code for a machine different from the one they are run on. The other compilers ccA and ccC produce code for the machine they are run on. Such compilers are called native compilers.

Almost all the build systems use names of the form cpu-vendor-kernel-os referred to as the machine triplet. An astute reader may wonder why a “triplet” refers to a four component name. The reason is history: initially, three component names were enough to designate unambiguously a machine, but with new machines and systems appearing, that proved insufficient. The word “triplet” remained. A simple way to determine your machine triplet is to run the config.guess script that comes with the source for many packages. Unpack the binutils sources and run the script: ./config.guess and note the output. For example, for a 32-bit Intel processor the output will be i686-pc-linux-gnu. On a 64-bit system it will be x86_64-pc-linux-gnu.

Also be aware of the name of the platform's dynamic linker, often referred to as the dynamic loader (not to be confused with the standard linker ld that is part of binutils). The dynamic linker provided by Glibc finds and loads the shared libraries needed by a program, prepares the program to run, and then runs it. The name of the dynamic linker for a 32-bit Intel machine will be ld-linux.so.2 (ld-linux-x86-64.so.2 for 64-bit systems). A sure-fire way to determine the name of the dynamic linker is to inspect a random binary from the host system by running: readelf -l <name of binary> | grep interpreter and noting the output. The authoritative reference covering all platforms is in the shlib-versions file in the root of the Glibc source tree.

binutils > gcc > glibc > libstdc++ > binutils-pass2 > gcc-pass2 

COMPILER=$LFS_TGT-gcc #--host CC="$LFS_TGT-gcc"
DESTDIR=/lfs
CC_FOR_TARGET=$LFS_TGT-gcc

1.) Place all the sources and patches in a directory that will be accessible from the chroot environment such as /mnt/lfs/sources/.
2.) Change to the sources directory.
3.) For each package:
	a.) Using the tar program, extract the package to be built. In Chapter 5 and Chapter 6, ensure you are the lfs user when extracting the package.
	b.) Change to the directory created when the package was extracted.
	c.) Follow the book's instructions for building the package.
	d.) Change back to the sources directory.
	e.) Delete the extracted source directory unless instructed otherwise.
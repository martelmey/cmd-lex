#http://www.cs.colby.edu/maxwell/courses/tutorials/maketutor/

gcc -o hellomake hellomake.c hellofunc.c -I.

This compiles the two .c files and names the executable hellomake.

So now we've defined some constants CC and CFLAGS. It turns out these are special constants that communicate to make how we want to compile the files hellomake.c and hellofunc.c. In particular, the macro CC is the C compiler to use, and CFLAGS is the list of flags to pass to the compilation command. By putting the object files--hellomake.o and hellofunc.o--in the dependency list and in the rule, make knows it must first compile the .c versions individually, and then build the executable hellomake.

This addition first creates the macro DEPS, which is the set of .h files on which the .c files depend. Then we define a rule that applies to all files ending in the .o suffix. The rule says that the .o file depends upon the .c version of the file and the .h files included in the DEPS macro. The rule then says that to generate the .o file, make needs to compile the .c file using the compiler defined in the CC macro. The -c flag says to generate the object file, the -o $@ says to put the output of the compilation in the file named on the left side of the :, the $< is the first item in the dependencies list, and the CFLAGS macro is defined as above.

CONFIG_SHELL=/usr/bin/bash
GNU awk version 3.1.5
GNU make version 3.80
Perl version between 5.6.1 and 5.6.24
	* Necessary when targeting Solaris 2 with Solaris ld and not using --disable-symvers.
	* Used by automake


export C_INCLUDE_PATH=$C_INCLUDE_PATH:/usr/include/libxml2
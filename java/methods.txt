public static <return-type> <name>(<params>) {
	// do stuff
	return <return-type>
}

public static int calculateScore(String playerName, int score) {
	System.out.println("Player " + playerName + " scored " + score + " points");
	return score * 1000;
}

// Overloading (the above)
// same method name, different params
public static int calculateScore(int score) {
	System.out.println("Unnamed player scored " + score + " points");
	return score * 1000;
}

// Static methods
// can't access instance methods & instance vars directly (can't use this.var)
// don't require an instance to be created
// public static void bark()

// Instance methods
// can access instance methods and instance vars directly
// class must be instantiated using new keyword
// public void bark()

// Static member variables
// all instances share same static vars
// changes to var are seen in all instances
// private static String name;

// Instance member variables
// each instance has its own copy
// represents the state of an instance
// private String name;